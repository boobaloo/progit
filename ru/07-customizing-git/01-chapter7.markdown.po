# Oleg Koptev <koptev.oleg@gmail.com>, 2011.
#. extracted from 01-chapter7.markdown
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2011-07-14 09:41+0400\n"
"PO-Revision-Date: 2011-07-14 10:15+0400\n"
"Last-Translator: Oleg Koptev <koptev.oleg@gmail.com>\n"
"Language-Team: koptev.oleg@gmail.com\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%"
"10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Virtaal 0.7.0-rc2\n"

#: 01-chapter7.markdown:1
msgid ""
"# Настройка Git #\n"
"Customizing Git"
msgstr ""
"# Настройка Git #\n"
"Customizing Git"

#: 01-chapter7.markdown:4
msgid ""
"So far, I’ve covered the basics of how Git works and how to use it, and I’ve "
"introduced a number of tools that Git provides to help you use it easily "
"and efficiently. In this chapter, I’ll go through some operations that you "
"can use to make Git operate in a more customized fashion by introducing "
"several important configuration settings and the hooks system. With these "
"tools, it’s easy to get Git to work exactly the way you, your company, or "
"your group needs it to."
msgstr ""
"В предыдущих главах я рассказал как работает Git и как его использовать и "
"описал ряд инструментов, которые имеются в Git для того, чтобы сделать вашу "
"работу быстрой и эффективной. В этой главе я расскажу о некоторых действиях, "
"которые вы можете выполнить для более индивидуализированной работы с Git, "
"путём более тонкого конфигурирования и настрйоки системы перехватчиков. "
"Благодаря им можно настроить Git таким образом, чтобы он полностью "
"удовлетворял потребностям вашей компании или группы разработчиков."

#: 01-chapter7.markdown:6
msgid "## Git Configuration ##"
msgstr "## Конфигурирование Git ##"

#: 01-chapter7.markdown:8
msgid ""
"As you briefly saw in the Chapter 1, you can specify Git configuration "
"settings with the `git config` command. One of the first things you did was "
"set up your name and e-mail address:"
msgstr ""
"Как кратко показано в главе 1, задать параметры конфигурации Git можно с "
"помощью команды `git config`. Одна из первых вещей, которую вы сделали, было "
"указаение вашего имени и адреса электронной почты:"

#: 01-chapter7.markdown:10
msgid ""
"\t$ git config --global user.name \"John Doe\"\n"
"\t$ git config --global user.email johndoe@example.com"
msgstr ""
"\t$ git config --global user.name \"John Doe\"\n"
"\t$ git config --global user.email johndoe@example.com"

#: 01-chapter7.markdown:13
msgid ""
"Now you’ll learn a few of the more interesting options that you can set in "
"this manner to customize your Git usage."
msgstr ""
"Теперь вы узнаете несколько более интересных опций, которые можно задать "
"таким образом, чтобы индивидуально настроить Git."

#: 01-chapter7.markdown:15
msgid ""
"You saw some simple Git configuration details in the first chapter, but I’ll "
"go over them again quickly here. Git uses a series of configuration files "
"to determine non-default behavior that you may want. The first place Git "
"looks for these values is in an `/etc/gitconfig` file, which contains values "
"for every user on the system and all of their repositories. If you pass the "
"option `--system` to `git config`, it reads and writes from this file "
"specifically. "
msgstr ""
"В первой главе вы уже видели некоторе простые настройки Git, но здесь я "
"снова пройдусь по ним. Git использует набор конфигурационных файлов для "
"определения нестандартных режимов работы, которые могут вам понадобиться. "
"Первым делом Git просматривает значения в файле `/etc/gitconfig`, который "
"содержит параметры для каждого пользователя в системе и для всех их "
"репозиториев. Если вы передадите параметр `--system` команде `git config`, "
"то Git будет производить чтение и запись в конкретно этот файл."

#: 01-chapter7.markdown:17
msgid ""
"The next place Git looks is the `~/.gitconfig` file, which is specific to "
"each user. You can make Git read and write to this file by passing the "
"`--global` option. "
msgstr ""
"Следующее место, которое проверяет Git, это файл `~/.gitconfig`, который "
"имеется независимо у каждого пользователя. Вы можете дать указание Git "
"использовать этот файл для чтения и записи, передав параметр `--global`."

#: 01-chapter7.markdown:19
msgid ""
"Finally, Git looks for configuration values in the config file in the Git "
"directory (`.git/config`) of whatever repository you’re currently using. "
"These values are specific to that single repository. Each level overwrites "
"values in the previous level, so values in `.git/config` trump those in "
"`/etc/gitconfig`, for instance. You can also set these values by manually "
"editing the file and inserting the correct syntax, but it’s generally easier "
"to run the `git config` command."
msgstr ""
"И, наконец, при просмотре конфигурационных значений, Git обращается к файлу "
"конфигурирования в каталоге Git (`.git/config`) любого используемого в "
"данный момент репозитория. Эти параметры специфичны для каждого репозитория. "
"Каждый новый уровень переписывает соответствующие значения предыдущих "
"уровней, так, например, значения в `.git/config` имеют больший приоритет, "
"чем в `/etc/gitconfig`. Вы можете задать эти параметры вручную, путём "
"непосредственного редактирования соответствующего файла, одноко как правило "
"проще использовать команду `git config`."

#: 01-chapter7.markdown:21
msgid "### Basic Client Configuration ###"
msgstr "### Основные настройки клиента ###"

#: 01-chapter7.markdown:23
msgid ""
"The configuration options recognized by Git fall into two categories: client "
"side and server side. The majority of the options are client "
"side—configuring your personal working preferences. Although tons of options "
"are available, I’ll only cover the few that either are commonly used or can "
"significantly affect your workflow. Many options are useful only in edge "
"cases that I won’t go over here. If you want to see a list of all the "
"options your version of Git recognizes, you can run"
msgstr ""

#: 01-chapter7.markdown:25
msgid "\t$ git config --help"
msgstr "\t$ git config --help"

#: 01-chapter7.markdown:27
msgid ""
"The manual page for `git config` lists all the available options in quite a "
"bit of detail."
msgstr ""

#: 01-chapter7.markdown:29
msgid "#### core.editor ####"
msgstr "#### core.editor ####"

#: 01-chapter7.markdown:31
msgid ""
"By default, Git uses whatever you’ve set as your default text editor or else "
"falls back to the Vi editor to create and edit your commit and tag "
"messages. To change that default to something else, you can use the "
"`core.editor` setting:"
msgstr ""

#: 01-chapter7.markdown:33
msgid "\t$ git config --global core.editor emacs"
msgstr "\t$ git config --global core.editor emacs"

#: 01-chapter7.markdown:35
msgid ""
"Now, no matter what is set as your default shell editor variable, Git will "
"fire up Emacs to edit messages."
msgstr ""

#: 01-chapter7.markdown:37
msgid "#### commit.template ####"
msgstr "#### commit.template ####"

#: 01-chapter7.markdown:39
msgid ""
"If you set this to the path of a file on your system, Git will use that file "
"as the default message when you commit. For instance, suppose you create a "
"template file at `$HOME/.gitmessage.txt` that looks like this:"
msgstr ""

#: 01-chapter7.markdown:41
msgctxt "01-chapter7.markdown:41"
msgid "\tsubject line"
msgstr ""

#: 01-chapter7.markdown:43
msgctxt "01-chapter7.markdown:43"
msgid "\twhat happened"
msgstr ""

#: 01-chapter7.markdown:45
msgid "\t[ticket: X]"
msgstr ""

#: 01-chapter7.markdown:47
msgid ""
"To tell Git to use it as the default message that appears in your editor "
"when you run `git commit`, set the `commit.template` configuration value:"
msgstr ""

#: 01-chapter7.markdown:49
msgid ""
"\t$ git config --global commit.template $HOME/.gitmessage.txt\n"
"\t$ git commit"
msgstr ""
"\t$ git config --global commit.template $HOME/.gitmessage.txt\n"
"\t$ git commit"

#: 01-chapter7.markdown:52
msgid ""
"Then, your editor will open to something like this for your placeholder "
"commit message when you commit:"
msgstr ""

#: 01-chapter7.markdown:54
msgctxt "01-chapter7.markdown:54"
msgid "\tsubject line"
msgstr ""

#: 01-chapter7.markdown:56
msgctxt "01-chapter7.markdown:56"
msgid "\twhat happened"
msgstr ""

#: 01-chapter7.markdown:58
msgid ""
"\t[ticket: X]\n"
"\t# Please enter the commit message for your changes. Lines starting\n"
"\t# with '#' will be ignored, and an empty message aborts the commit.\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t# modified:   lib/test.rb\n"
"\t#\n"
"\t~\n"
"\t~\n"
"\t\".git/COMMIT_EDITMSG\" 14L, 297C"
msgstr ""
"\t[ticket: X]\n"
"\t# Please enter the commit message for your changes. Lines starting\n"
"\t# with '#' will be ignored, and an empty message aborts the commit.\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t# modified:   lib/test.rb\n"
"\t#\n"
"\t~\n"
"\t~\n"
"\t\".git/COMMIT_EDITMSG\" 14L, 297C"

#: 01-chapter7.markdown:71
msgid ""
"If you have a commit-message policy in place, then putting a template for "
"that policy on your system and configuring Git to use it by default can help "
"increase the chance of that policy being followed regularly."
msgstr ""

#: 01-chapter7.markdown:73
msgid "#### core.pager ####"
msgstr "#### core.pager ####"

#: 01-chapter7.markdown:75
msgid ""
"The core.pager setting determines what pager is used when Git pages output "
"such as `log` and `diff`. You can set it to `more` or to your favorite pager "
"(by default, it’s `less`), or you can turn it off by setting it to a blank "
"string:"
msgstr ""

#: 01-chapter7.markdown:77
msgid "\t$ git config --global core.pager ''"
msgstr "\t$ git config --global core.pager ''"

#: 01-chapter7.markdown:79
msgid ""
"If you run that, Git will page the entire output of all commands, no matter "
"how long they are."
msgstr ""

#: 01-chapter7.markdown:81
msgid "#### user.signingkey ####"
msgstr "#### user.signingkey ####"

#: 01-chapter7.markdown:83
msgid ""
"If you’re making signed annotated tags (as discussed in Chapter 2), setting "
"your GPG signing key as a configuration setting makes things easier. Set "
"your key ID like so:"
msgstr ""

#: 01-chapter7.markdown:85
msgid "\t$ git config --global user.signingkey <gpg-key-id>"
msgstr "\t$ git config --global user.signingkey <gpg-key-id>"

#: 01-chapter7.markdown:87
msgid ""
"Now, you can sign tags without having to specify your key every time with "
"the `git tag` command:"
msgstr ""

#: 01-chapter7.markdown:89
msgid "\t$ git tag -s <tag-name>"
msgstr "\t$ git tag -s <tag-name>"

#: 01-chapter7.markdown:91
msgid "#### core.excludesfile ####"
msgstr "#### core.excludesfile ####"

#: 01-chapter7.markdown:93
msgid ""
"You can put patterns in your project’s `.gitignore` file to have Git not see "
"them as untracked files or try to stage them when you run `git add` on "
"them, as discussed in Chapter 2. However, if you want another file outside "
"of your project to hold those values or have extra values, you can tell Git "
"where that file is with the `core.excludesfile` setting. Simply set it to "
"the path of a file that has content similar to what a `.gitignore` file "
"would have."
msgstr ""

#: 01-chapter7.markdown:95
msgid "#### help.autocorrect ####"
msgstr "#### help.autocorrect ####"

#: 01-chapter7.markdown:97
msgid ""
"This option is available only in Git 1.6.1 and later. If you mistype a "
"command in Git 1.6, it shows you something like this:"
msgstr ""

#: 01-chapter7.markdown:99
msgid ""
"\t$ git com\n"
"\tgit: 'com' is not a git-command. See 'git --help'."
msgstr ""
"\t$ git com\n"
"\tgit: 'com' is not a git-command. See 'git --help'."

#: 01-chapter7.markdown:102
msgid ""
"\tDid you mean this?\n"
"\t     commit"
msgstr ""
"\tDid you mean this?\n"
"\t     commit"

#: 01-chapter7.markdown:105
msgid ""
"If you set `help.autocorrect` to 1, Git will automatically run the command "
"if it has only one match under this scenario."
msgstr ""

#: 01-chapter7.markdown:107
msgid "### Colors in Git ###"
msgstr "### Цвета в Git ###"

#: 01-chapter7.markdown:109
msgid ""
"Git can color its output to your terminal, which can help you visually parse "
"the output quickly and easily. A number of options can help you set the "
"coloring to your preference."
msgstr ""

#: 01-chapter7.markdown:111
msgid "#### color.ui ####"
msgstr "#### color.ui ####"

#: 01-chapter7.markdown:113
msgid ""
"Git automatically colors most of its output if you ask it to. You can get "
"very specific about what you want colored and how; but to turn on all the "
"default terminal coloring, set `color.ui` to true:"
msgstr ""

#: 01-chapter7.markdown:115
msgid "\t$ git config --global color.ui true"
msgstr "\t$ git config --global color.ui true"

#: 01-chapter7.markdown:117
msgid ""
"When that value is set, Git colors its output if the output goes to a "
"terminal. Other possible settings are false, which never colors the output, "
"and always, which sets colors all the time, even if you’re redirecting Git "
"commands to a file or piping them to another command. This setting was added "
"in Git version 1.5.5; if you have an older version, you’ll have to specify "
"all the color settings individually."
msgstr ""

#: 01-chapter7.markdown:119
msgid ""
"You’ll rarely want `color.ui = always`. In most scenarios, if you want color "
"codes in your redirected output, you can instead pass a `--color` flag to "
"the Git command to force it to use color codes. The `color.ui = true` "
"setting is almost always what you’ll want to use."
msgstr ""

#: 01-chapter7.markdown:121
msgid "#### `color.*` ####"
msgstr "#### `color.*` ####"

#: 01-chapter7.markdown:123
msgid ""
"If you want to be more specific about which commands are colored and how, or "
"you have an older version, Git provides verb-specific coloring settings. "
"Each of these can be set to `true`, `false`, or `always`:"
msgstr ""

#: 01-chapter7.markdown:125
msgid ""
"\tcolor.branch\n"
"\tcolor.diff\n"
"\tcolor.interactive\n"
"\tcolor.status"
msgstr ""
"\tcolor.branch\n"
"\tcolor.diff\n"
"\tcolor.interactive\n"
"\tcolor.status"

#: 01-chapter7.markdown:130
msgid ""
"In addition, each of these has subsettings you can use to set specific "
"colors for parts of the output, if you want to override each color. For "
"example, to set the meta information in your diff output to blue foreground, "
"black background, and bold text, you can run"
msgstr ""

#: 01-chapter7.markdown:132
msgid "\t$ git config --global color.diff.meta “blue black bold”"
msgstr "\t$ git config --global color.diff.meta “blue black bold”"

#: 01-chapter7.markdown:134
msgid ""
"You can set the color to any of the following values: normal, black, red, "
"green, yellow, blue, magenta, cyan, or white. If you want an attribute like "
"bold in the previous example, you can choose from bold, dim, ul, blink, and "
"reverse."
msgstr ""

#: 01-chapter7.markdown:136
msgid ""
"See the `git config` manpage for all the subsettings you can configure, if "
"you want to do that."
msgstr ""

#: 01-chapter7.markdown:138
msgid "### External Merge and Diff Tools ###"
msgstr "### Внешние инструменты слияния и просмотра различий ###"

#: 01-chapter7.markdown:140
msgid ""
"Although Git has an internal implementation of diff, which is what you’ve "
"been using, you can set up an external tool instead. You can also set up a "
"graphical merge conflict-resolution tool instead of having to resolve "
"conflicts manually. I’ll demonstrate setting up the Perforce Visual Merge "
"Tool (P4Merge) to do your diffs and merge resolutions, because it’s a nice "
"graphical tool and it’s free."
msgstr ""

#: 01-chapter7.markdown:142
msgid ""
"If you want to try this out, P4Merge works on all major platforms, so you "
"should be able to do so. I’ll use path names in the examples that work on "
"Mac and Linux systems; for Windows, you’ll have to change `/usr/local/bin` "
"to an executable path in your environment."
msgstr ""

#: 01-chapter7.markdown:144
msgid "You can download P4Merge here:"
msgstr ""

#: 01-chapter7.markdown:146
msgid "\thttp://www.perforce.com/perforce/downloads/component.html"
msgstr "\thttp://www.perforce.com/perforce/downloads/component.html"

#: 01-chapter7.markdown:148
msgid ""
"To begin, you’ll set up external wrapper scripts to run your commands. I’ll "
"use the Mac path for the executable; in other systems, it will be where your "
"`p4merge` binary is installed. Set up a merge wrapper script named "
"`extMerge` that calls your binary with all the arguments provided:"
msgstr ""

#: 01-chapter7.markdown:150
msgid ""
"\t$ cat /usr/local/bin/extMerge\n"
"\t#!/bin/sh\n"
"\t/Applications/p4merge.app/Contents/MacOS/p4merge $*"
msgstr ""
"\t$ cat /usr/local/bin/extMerge\n"
"\t#!/bin/sh\n"
"\t/Applications/p4merge.app/Contents/MacOS/p4merge $*"

#: 01-chapter7.markdown:154
msgid ""
"The diff wrapper checks to make sure seven arguments are provided and passes "
"two of them to your merge script. By default, Git passes the following "
"arguments to the diff program:"
msgstr ""

#: 01-chapter7.markdown:156
msgid "\tpath old-file old-hex old-mode new-file new-hex new-mode"
msgstr "\tpath old-file old-hex old-mode new-file new-hex new-mode"

#: 01-chapter7.markdown:158
msgid ""
"Because you only want the `old-file` and `new-file` arguments, you use the "
"wrapper script to pass the ones you need."
msgstr ""

#: 01-chapter7.markdown:160
msgid ""
"\t$ cat /usr/local/bin/extDiff \n"
"\t#!/bin/sh\n"
"\t[ $# -eq 7 ] && /usr/local/bin/extMerge \"$2\" \"$5\""
msgstr ""
"\t$ cat /usr/local/bin/extDiff \n"
"\t#!/bin/sh\n"
"\t[ $# -eq 7 ] && /usr/local/bin/extMerge \"$2\" \"$5\""

#: 01-chapter7.markdown:164
msgid "You also need to make sure these tools are executable:"
msgstr ""

#: 01-chapter7.markdown:166
msgid ""
"\t$ sudo chmod +x /usr/local/bin/extMerge \n"
"\t$ sudo chmod +x /usr/local/bin/extDiff"
msgstr ""
"\t$ sudo chmod +x /usr/local/bin/extMerge \n"
"\t$ sudo chmod +x /usr/local/bin/extDiff"

#: 01-chapter7.markdown:169
msgid ""
"Now you can set up your config file to use your custom merge resolution and "
"diff tools. This takes a number of custom settings: `merge.tool` to tell Git "
"what strategy to use, `mergetool.*.cmd` to specify how to run the command, "
"`mergetool.trustExitCode` to tell Git if the exit code of that program "
"indicates a successful merge resolution or not, and `diff.external` to tell "
"Git what command to run for diffs. So, you can either run four config "
"commands"
msgstr ""

#: 01-chapter7.markdown:171
msgid ""
"\t$ git config --global merge.tool extMerge\n"
"\t$ git config --global mergetool.extMerge.cmd \\\n"
"\t    'extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"'\n"
"\t$ git config --global mergetool.trustExitCode false\n"
"\t$ git config --global diff.external extDiff"
msgstr ""
"\t$ git config --global merge.tool extMerge\n"
"\t$ git config --global mergetool.extMerge.cmd \\\n"
"\t    'extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"'\n"
"\t$ git config --global mergetool.trustExitCode false\n"
"\t$ git config --global diff.external extDiff"

#: 01-chapter7.markdown:177
msgid "or you can edit your `~/.gitconfig` file to add these lines:"
msgstr ""

#: 01-chapter7.markdown:179
msgid ""
"\t[merge]\n"
"\t  tool = extMerge\n"
"\t[mergetool \"extMerge\"]\n"
"\t  cmd = extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"\n"
"\t  trustExitCode = false\n"
"\t[diff]\n"
"\t  external = extDiff"
msgstr ""
"\t[merge]\n"
"\t  tool = extMerge\n"
"\t[mergetool \"extMerge\"]\n"
"\t  cmd = extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"\n"
"\t  trustExitCode = false\n"
"\t[diff]\n"
"\t  external = extDiff"

#: 01-chapter7.markdown:187
msgid "After all this is set, if you run diff commands such as this:"
msgstr ""

#: 01-chapter7.markdown:189
msgid "\t$ git diff 32d1776b1^ 32d1776b1"
msgstr "\t$ git diff 32d1776b1^ 32d1776b1"

#: 01-chapter7.markdown:191
msgid ""
"Instead of getting the diff output on the command line, Git fires up "
"P4Merge, which looks something like Figure 7-1."
msgstr ""

#: 01-chapter7.markdown:193
msgid ""
"Insert 18333fig0701.png \n"
"Figure 7-1. P4Merge."
msgstr ""

#: 01-chapter7.markdown:196
msgid ""
"If you try to merge two branches and subsequently have merge conflicts, you "
"can run the command `git mergetool`; it starts P4Merge to let you resolve "
"the conflicts through that GUI tool."
msgstr ""

#: 01-chapter7.markdown:198
msgid ""
"The nice thing about this wrapper setup is that you can change your diff and "
"merge tools easily. For example, to change your `extDiff` and `extMerge` "
"tools to run the KDiff3 tool instead, all you have to do is edit your "
"`extMerge` file:"
msgstr ""

#: 01-chapter7.markdown:200
msgid ""
"\t$ cat /usr/local/bin/extMerge\n"
"\t#!/bin/sh\t\n"
"\t/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*"
msgstr ""
"\t$ cat /usr/local/bin/extMerge\n"
"\t#!/bin/sh\t\n"
"\t/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*"

#: 01-chapter7.markdown:204
msgid ""
"Now, Git will use the KDiff3 tool for diff viewing and merge conflict "
"resolution."
msgstr ""

#: 01-chapter7.markdown:206
msgid ""
"Git comes preset to use a number of other merge-resolution tools without "
"your having to set up the cmd configuration. You can set your merge tool to "
"kdiff3, opendiff, tkdiff, meld, xxdiff, emerge, vimdiff, or gvimdiff. If "
"you’re not interested in using KDiff3 for diff but rather want to use it "
"just for merge resolution, and the kdiff3 command is in your path, then you "
"can run"
msgstr ""

#: 01-chapter7.markdown:208
msgid "\t$ git config --global merge.tool kdiff3"
msgstr "\t$ git config --global merge.tool kdiff3"

#: 01-chapter7.markdown:210
msgid ""
"If you run this instead of setting up the `extMerge` and `extDiff` files, "
"Git will use KDiff3 for merge resolution and the normal Git diff tool for "
"diffs."
msgstr ""

#: 01-chapter7.markdown:212
msgid "### Formatting and Whitespace ###"
msgstr "### Форматирование строк и непечатаемых знаков ###"

#: 01-chapter7.markdown:214
msgid ""
"Formatting and whitespace issues are some of the more frustrating and subtle "
"problems that many developers encounter when collaborating, especially "
"cross-platform. It’s very easy for patches or other collaborated work to "
"introduce subtle whitespace changes because editors silently introduce them "
"or Windows programmers add carriage returns at the end of lines they touch "
"in cross-platform projects. Git has a few configuration options to help with "
"these issues."
msgstr ""

#: 01-chapter7.markdown:216
msgid "#### core.autocrlf ####"
msgstr "#### core.autocrlf ####"

#: 01-chapter7.markdown:218
msgid ""
"If you’re programming on Windows or using another system but working with "
"people who are programming on Windows, you’ll probably run into line-ending "
"issues at some point. This is because Windows uses both a carriage-return "
"character and a linefeed character for newlines in its files, whereas Mac "
"and Linux systems use only the linefeed character. This is a subtle but "
"incredibly annoying fact of cross-platform work. "
msgstr ""

#: 01-chapter7.markdown:220
msgid ""
"Git can handle this by auto-converting CRLF line endings into LF when you "
"commit, and vice versa when it checks out code onto your filesystem. You can "
"turn on this functionality with the `core.autocrlf` setting. If you’re on a "
"Windows machine, set it to `true` — this converts LF endings into CRLF when "
"you check out code:"
msgstr ""

#: 01-chapter7.markdown:222
msgid "\t$ git config --global core.autocrlf true"
msgstr "\t$ git config --global core.autocrlf true"

#: 01-chapter7.markdown:224
msgid ""
"If you’re on a Linux or Mac system that uses LF line endings, then you don’t "
"want Git to automatically convert them when you check out files; however, "
"if a file with CRLF endings accidentally gets introduced, then you may want "
"Git to fix it. You can tell Git to convert CRLF to LF on commit but not the "
"other way around by setting `core.autocrlf` to input:"
msgstr ""

#: 01-chapter7.markdown:226
msgid "\t$ git config --global core.autocrlf input"
msgstr "\t$ git config --global core.autocrlf input"

#: 01-chapter7.markdown:228
msgid ""
"This setup should leave you with CRLF endings in Windows checkouts but LF "
"endings on Mac and Linux systems and in the repository."
msgstr ""

#: 01-chapter7.markdown:230
msgid ""
"If you’re a Windows programmer doing a Windows-only project, then you can "
"turn off this functionality, recording the carriage returns in the "
"repository by setting the config value to `false`:"
msgstr ""

#: 01-chapter7.markdown:232
msgid "\t$ git config --global core.autocrlf false"
msgstr "\t$ git config --global core.autocrlf false"

#: 01-chapter7.markdown:234
msgid "#### core.whitespace ####"
msgstr "#### core.whitespace ####"

#: 01-chapter7.markdown:236
msgid ""
"Git comes preset to detect and fix some whitespace issues. It can look for "
"four primary whitespace issues — two are enabled by default and can be "
"turned off, and two aren’t enabled by default but can be activated."
msgstr ""

#: 01-chapter7.markdown:238
msgid ""
"The two that are turned on by default are `trailing-space`, which looks for "
"spaces at the end of a line, and `space-before-tab`, which looks for spaces "
"before tabs at the beginning of a line."
msgstr ""

#: 01-chapter7.markdown:240
msgid ""
"The two that are disabled by default but can be turned on are `indent-with-"
"non-tab`, which looks for lines that begin with eight or more spaces instead "
"of tabs, and `cr-at-eol`, which tells Git that carriage returns at the end "
"of lines are OK."
msgstr ""

#: 01-chapter7.markdown:242
msgid ""
"You can tell Git which of these you want enabled by setting "
"`core.whitespace` to the values you want on or off, separated by commas. You "
"can disable settings by either leaving them out of the setting string or "
"prepending a `-` in front of the value. For example, if you want all but "
"`cr-at-eol` to be set, you can do this:"
msgstr ""

#: 01-chapter7.markdown:244
msgid ""
"\t$ git config --global core.whitespace \\\n"
"\t    trailing-space,space-before-tab,indent-with-non-tab"
msgstr ""
"\t$ git config --global core.whitespace \\\n"
"\t    trailing-space,space-before-tab,indent-with-non-tab"

#: 01-chapter7.markdown:247
msgid ""
"Git will detect these issues when you run a `git diff` command and try to "
"color them so you can possibly fix them before you commit. It will also use "
"these values to help you when you apply patches with `git apply`. When "
"you’re applying patches, you can ask Git to warn you if it’s applying "
"patches with the specified whitespace issues:"
msgstr ""

#: 01-chapter7.markdown:249
msgid "\t$ git apply --whitespace=warn <patch>"
msgstr "\t$ git apply --whitespace=warn <patch>"

#: 01-chapter7.markdown:251
msgid ""
"Or you can have Git try to automatically fix the issue before applying the "
"patch:"
msgstr ""

#: 01-chapter7.markdown:253
msgid "\t$ git apply --whitespace=fix <patch>"
msgstr "\t$ git apply --whitespace=fix <patch>"

#: 01-chapter7.markdown:255
msgid ""
"These options apply to the git rebase option as well. If you’ve committed "
"whitespace issues but haven’t yet pushed upstream, you can run a `rebase` "
"with the `--whitespace=fix` option to have Git automatically fix whitespace "
"issues as it’s rewriting the patches."
msgstr ""

#: 01-chapter7.markdown:257
msgid "### Server Configuration ###"
msgstr "### Настройка сервера ###"

#: 01-chapter7.markdown:259
msgid ""
"Not nearly as many configuration options are available for the server side "
"of Git, but there are a few interesting ones you may want to take note of."
msgstr ""

#: 01-chapter7.markdown:261
msgid "#### receive.fsckObjects ####"
msgstr "#### receive.fsckObjects ####"

#: 01-chapter7.markdown:263
msgid ""
"By default, Git doesn’t check for consistency all the objects it receives "
"during a push. Although Git can check to make sure each object still matches "
"its SHA-1 checksum and points to valid objects, it doesn’t do that by "
"default on every push. This is a relatively expensive operation and may add "
"a lot of time to each push, depending on the size of the repository or the "
"push. If you want Git to check object consistency on every push, you can "
"force it to do so by setting `receive.fsckObjects` to true:"
msgstr ""

#: 01-chapter7.markdown:265
msgid "\t$ git config --system receive.fsckObjects true"
msgstr "\t$ git config --system receive.fsckObjects true"

#: 01-chapter7.markdown:267
msgid ""
"Now, Git will check the integrity of your repository before each push is "
"accepted to make sure faulty clients aren’t introducing corrupt data."
msgstr ""

#: 01-chapter7.markdown:269
msgid "#### receive.denyNonFastForwards ####"
msgstr "#### receive.denyNonFastForwards ####"

#: 01-chapter7.markdown:271
msgid ""
"If you rebase commits that you’ve already pushed and then try to push again, "
"or otherwise try to push a commit to a remote branch that doesn’t contain "
"the commit that the remote branch currently points to, you’ll be denied. "
"This is generally good policy; but in the case of the rebase, you may "
"determine that you know what you’re doing and can force-update the remote "
"branch with a `-f` flag to your push command."
msgstr ""

#: 01-chapter7.markdown:273
msgid ""
"To disable the ability to force-update remote branches to non-fast-forward "
"references, set `receive.denyNonFastForwards`:"
msgstr ""

#: 01-chapter7.markdown:275
msgid "\t$ git config --system receive.denyNonFastForwards true"
msgstr "\t$ git config --system receive.denyNonFastForwards true"

#: 01-chapter7.markdown:277
msgid ""
"The other way you can do this is via server-side receive hooks, which I’ll "
"cover in a bit. That approach lets you do more complex things like deny non-"
"fast-forwards to a certain subset of users."
msgstr ""

#: 01-chapter7.markdown:279
msgid "#### receive.denyDeletes ####"
msgstr "#### receive.denyDeletes ####"

#: 01-chapter7.markdown:281
msgid ""
"One of the workarounds to the `denyNonFastForwards` policy is for the user "
"to delete the branch and then push it back up with the new reference. In "
"newer versions of Git (beginning with version 1.6.1), you can set "
"`receive.denyDeletes` to true:"
msgstr ""

#: 01-chapter7.markdown:283
msgid "\t$ git config --system receive.denyDeletes true"
msgstr "\t$ git config --system receive.denyDeletes true"

#: 01-chapter7.markdown:285
msgid ""
"This denies branch and tag deletion over a push across the board — no user "
"can do it. To remove remote branches, you must remove the ref files from the "
"server manually. There are also more interesting ways to do this on a per-"
"user basis via ACLs, as you’ll learn at the end of this chapter."
msgstr ""

#: 01-chapter7.markdown:287
msgid "## Git Attributes ##"
msgstr "## Атрибуты Git ##"

#: 01-chapter7.markdown:289
msgid ""
"Some of these settings can also be specified for a path, so that Git applies "
"those settings only for a subdirectory or subset of files. These path-"
"specific settings are called Git attributes and are set either in a "
"`.gitattributes` file in one of your directories (normally the root of your "
"project) or in the `.git/info/attributes` file if you don’t want the "
"attributes file committed with your project."
msgstr ""

#: 01-chapter7.markdown:291
msgid ""
"Using attributes, you can do things like specify separate merge strategies "
"for individual files or directories in your project, tell Git how to diff "
"non-text files, or have Git filter content before you check it into or out "
"of Git. In this section, you’ll learn about some of the attributes you can "
"set on your paths in your Git project and see a few examples of using this "
"feature in practice."
msgstr ""

#: 01-chapter7.markdown:293
msgid "### Binary Files ###"
msgstr "### Двоичные файлы ###"

#: 01-chapter7.markdown:295
msgid ""
"One cool trick for which you can use Git attributes is telling Git which "
"files are binary (in cases it otherwise may not be able to figure out) and "
"giving Git special instructions about how to handle those files. For "
"instance, some text files may be machine generated and not diffable, whereas "
"some binary files can be diffed — you’ll see how to tell Git which is "
"which."
msgstr ""

#: 01-chapter7.markdown:297
msgid "#### Identifying Binary Files ####"
msgstr "#### Идентификация двоичных файлов ####"

#: 01-chapter7.markdown:299
msgid ""
"Some files look like text files but for all intents and purposes are to be "
"treated as binary data. For instance, Xcode projects on the Mac contain a "
"file that ends in `.pbxproj`, which is basically a JSON (plain text "
"javascript data format) dataset written out to disk by the IDE that records "
"your build settings and so on. Although it’s technically a text file, "
"because it’s all ASCII, you don’t want to treat it as such because it’s "
"really a lightweight database — you can’t merge the contents if two people "
"changed it, and diffs generally aren’t helpful. The file is meant to be "
"consumed by a machine. In essence, you want to treat it like a binary file."
msgstr ""

#: 01-chapter7.markdown:301
msgid ""
"To tell Git to treat all `pbxproj` files as binary data, add the following "
"line to your `.gitattributes` file:"
msgstr ""

#: 01-chapter7.markdown:303
msgid "\t*.pbxproj -crlf -diff"
msgstr "\t*.pbxproj -crlf -diff"

#: 01-chapter7.markdown:305
msgid ""
"Now, Git won’t try to convert or fix CRLF issues; nor will it try to compute "
"or print a diff for changes in this file when you run git show or git diff "
"on your project. In the 1.6 series of Git, you can also use a macro that is "
"provided that means `-crlf -diff`:"
msgstr ""

#: 01-chapter7.markdown:307
msgid "\t*.pbxproj binary"
msgstr "\t*.pbxproj binary"

#: 01-chapter7.markdown:309
msgid "#### Diffing Binary Files ####"
msgstr "#### Определение различий в двоичных файлах ####"

#: 01-chapter7.markdown:311
msgid ""
"In the 1.6 series of Git, you can use the Git attributes functionality to "
"effectively diff binary files. You do this by telling Git how to convert "
"your binary data to a text format that can be compared via the normal diff."
msgstr ""

#: 01-chapter7.markdown:313
msgid ""
"Because this is a pretty cool and not widely known feature, I’ll go over a "
"few examples. First, you’ll use this technique to solve one of the most "
"annoying problems known to humanity: version-controlling Word documents. "
"Everyone knows that Word is the most horrific editor around; but, oddly, "
"everyone uses it. If you want to version-control Word documents, you can "
"stick them in a Git repository and commit every once in a while; but what "
"good does that do? If you run `git diff` normally, you only see something "
"like this:"
msgstr ""

#: 01-chapter7.markdown:315
msgid ""
"\t$ git diff \n"
"\tdiff --git a/chapter1.doc b/chapter1.doc\n"
"\tindex 88839c4..4afcb7c 100644\n"
"\tBinary files a/chapter1.doc and b/chapter1.doc differ"
msgstr ""
"\t$ git diff \n"
"\tdiff --git a/chapter1.doc b/chapter1.doc\n"
"\tindex 88839c4..4afcb7c 100644\n"
"\tBinary files a/chapter1.doc and b/chapter1.doc differ"

#: 01-chapter7.markdown:320
msgid ""
"You can’t directly compare two versions unless you check them out and scan "
"them manually, right? It turns out you can do this fairly well using Git "
"attributes. Put the following line in your `.gitattributes` file:"
msgstr ""

#: 01-chapter7.markdown:322
msgid "\t*.doc diff=word"
msgstr "\t*.doc diff=word"

#: 01-chapter7.markdown:324
msgid ""
"This tells Git that any file that matches this pattern (.doc) should use the "
"\"word\" filter when you try to view a diff that contains changes. What is "
"the \"word\" filter? You have to set it up. Here you’ll configure Git to use "
"the `strings` program to convert Word documents into readable text files, "
"which it will then diff properly:"
msgstr ""

#: 01-chapter7.markdown:326
msgid "\t$ git config diff.word.textconv strings"
msgstr "\t$ git config diff.word.textconv strings"

#: 01-chapter7.markdown:328
msgid ""
"Now Git knows that if it tries to do a diff between two snapshots, and any "
"of the files end in `.doc`, it should run those files through the \"word\" "
"filter, which is defined as the `strings` program. This effectively makes "
"nice text-based versions of your Word files before attempting to diff them."
msgstr ""

#: 01-chapter7.markdown:330
msgid ""
"Here’s an example. I put Chapter 1 of this book into Git, added some text to "
"a paragraph, and saved the document. Then, I ran `git diff` to see what "
"changed:"
msgstr ""

#: 01-chapter7.markdown:332
msgid ""
"\t$ git diff\n"
"\tdiff --git a/chapter1.doc b/chapter1.doc\n"
"\tindex c1c8a0a..b93c9e4 100644\n"
"\t--- a/chapter1.doc\n"
"\t+++ b/chapter1.doc\n"
"\t@@ -8,7 +8,8 @@ re going to cover Version Control Systems (VCS) and Git "
"basics\n"
"\t re going to cover how to get it and set it up for the first time if you "
"don\n"
"\t t already have it on your system.\n"
"\t In Chapter Two we will go over basic Git usage - how to use Git for the 80"
"% \n"
"\t-s going on, modify stuff and contribute changes. If the book spontaneously "
"\t+s going on, modify stuff and contribute changes. If the book spontaneously "
"\t+Let's see if this works."
msgstr ""
"\t$ git diff\n"
"\tdiff --git a/chapter1.doc b/chapter1.doc\n"
"\tindex c1c8a0a..b93c9e4 100644\n"
"\t--- a/chapter1.doc\n"
"\t+++ b/chapter1.doc\n"
"\t@@ -8,7 +8,8 @@ re going to cover Version Control Systems (VCS) and Git "
"basics\n"
"\t re going to cover how to get it and set it up for the first time if you "
"don\n"
"\t t already have it on your system.\n"
"\t In Chapter Two we will go over basic Git usage - how to use Git for the 80"
"% \n"
"\t-s going on, modify stuff and contribute changes. If the book spontaneously "
"\t+s going on, modify stuff and contribute changes. If the book "
"spontaneously \t+Let's see if this works."

#: 01-chapter7.markdown:345
msgid ""
"Git successfully and succinctly tells me that I added the string \"Let’s see "
"if this works\", which is correct. It’s not perfect — it adds a bunch of "
"random stuff at the end — but it certainly works. If you can find or write a "
"Word-to-plain-text converter that works well enough, that solution will "
"likely be incredibly effective. However, `strings` is available on most Mac "
"and Linux systems, so it may be a good first try to do this with many binary "
"formats."
msgstr ""

#: 01-chapter7.markdown:347
msgid ""
"Another interesting problem you can solve this way involves diffing image "
"files. One way to do this is to run JPEG files through a filter that "
"extracts their EXIF information — metadata that is recorded with most image "
"formats. If you download and install the `exiftool` program, you can use it "
"to convert your images into text about the metadata, so at least the diff "
"will show you a textual representation of any changes that happened:"
msgstr ""

#: 01-chapter7.markdown:349
msgid ""
"\t$ echo '*.png diff=exif' >> .gitattributes\n"
"\t$ git config diff.exif.textconv exiftool"
msgstr ""
"\t$ echo '*.png diff=exif' >> .gitattributes\n"
"\t$ git config diff.exif.textconv exiftool"

#: 01-chapter7.markdown:352
msgid ""
"If you replace an image in your project and run `git diff`, you see "
"something like this:"
msgstr ""

#: 01-chapter7.markdown:354
msgid ""
"\tdiff --git a/image.png b/image.png\n"
"\tindex 88839c4..4afcb7c 100644\n"
"\t--- a/image.png\n"
"\t+++ b/image.png\n"
"\t@@ -1,12 +1,12 @@\n"
"\t ExifTool Version Number         : 7.74\n"
"\t-File Size                       : 70 kB\n"
"\t-File Modification Date/Time     : 2009:04:21 07:02:45-07:00\n"
"\t+File Size                       : 94 kB\n"
"\t+File Modification Date/Time     : 2009:04:21 07:02:43-07:00\n"
"\t File Type                       : PNG\n"
"\t MIME Type                       : image/png\n"
"\t-Image Width                     : 1058\n"
"\t-Image Height                    : 889\n"
"\t+Image Width                     : 1056\n"
"\t+Image Height                    : 827\n"
"\t Bit Depth                       : 8\n"
"\t Color Type                      : RGB with Alpha"
msgstr ""
"\tdiff --git a/image.png b/image.png\n"
"\tindex 88839c4..4afcb7c 100644\n"
"\t--- a/image.png\n"
"\t+++ b/image.png\n"
"\t@@ -1,12 +1,12 @@\n"
"\t ExifTool Version Number         : 7.74\n"
"\t-File Size                       : 70 kB\n"
"\t-File Modification Date/Time     : 2009:04:21 07:02:45-07:00\n"
"\t+File Size                       : 94 kB\n"
"\t+File Modification Date/Time     : 2009:04:21 07:02:43-07:00\n"
"\t File Type                       : PNG\n"
"\t MIME Type                       : image/png\n"
"\t-Image Width                     : 1058\n"
"\t-Image Height                    : 889\n"
"\t+Image Width                     : 1056\n"
"\t+Image Height                    : 827\n"
"\t Bit Depth                       : 8\n"
"\t Color Type                      : RGB with Alpha"

#: 01-chapter7.markdown:373
msgid ""
"You can easily see that the file size and image dimensions have both "
"changed."
msgstr ""

#: 01-chapter7.markdown:375
msgid "### Keyword Expansion ###"
msgstr "### Расширение ключевого слова ###"

#: 01-chapter7.markdown:377
msgid ""
"SVN- or CVS-style keyword expansion is often requested by developers used to "
"those systems. The main problem with this in Git is that you can’t modify a "
"file with information about the commit after you’ve committed, because Git "
"checksums the file first. However, you can inject text into a file when it’s "
"checked out and remove it again before it’s added to a commit. Git "
"attributes offers you two ways to do this."
msgstr ""

#: 01-chapter7.markdown:379
msgid ""
"First, you can inject the SHA-1 checksum of a blob into an `$Id$` field in "
"the file automatically. If you set this attribute on a file or set of files, "
"then the next time you check out that branch, Git will replace that field "
"with the SHA-1 of the blob. It’s important to notice that it isn’t the SHA "
"of the commit, but of the blob itself:"
msgstr ""

#: 01-chapter7.markdown:381
msgid ""
"\t$ echo '*.txt ident' >> .gitattributes\n"
"\t$ echo '$Id$' > test.txt"
msgstr ""
"\t$ echo '*.txt ident' >> .gitattributes\n"
"\t$ echo '$Id$' > test.txt"

#: 01-chapter7.markdown:384
msgid "The next time you check out this file, Git injects the SHA of the blob:"
msgstr ""

#: 01-chapter7.markdown:386
msgid ""
"\t$ rm text.txt\n"
"\t$ git checkout -- text.txt\n"
"\t$ cat test.txt \n"
"\t$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $"
msgstr ""
"\t$ rm text.txt\n"
"\t$ git checkout -- text.txt\n"
"\t$ cat test.txt \n"
"\t$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $"

#: 01-chapter7.markdown:391
msgid ""
"However, that result is of limited use. If you’ve used keyword substitution "
"in CVS or Subversion, you can include a datestamp — the SHA isn’t all that "
"helpful, because it’s fairly random and you can’t tell if one SHA is older "
"or newer than another."
msgstr ""

#: 01-chapter7.markdown:393
msgid ""
"It turns out that you can write your own filters for doing substitutions in "
"files on commit/checkout. These are the \"clean\" and \"smudge\" filters. In the "
"`.gitattributes` file, you can set a filter for particular paths and then "
"set up scripts that will process files just before they’re checked out "
"(\"smudge\", see Figure 7-2) and just before they’re committed (\"clean\", see "
"Figure 7-3). These filters can be set to do all sorts of fun things."
msgstr ""

#: 01-chapter7.markdown:395
msgid ""
"Insert 18333fig0702.png \n"
"Figure 7-2. The “smudge” filter is run on checkout."
msgstr ""

#: 01-chapter7.markdown:398
msgid ""
"Insert 18333fig0703.png \n"
"Figure 7-3. The “clean” filter is run when files are staged."
msgstr ""

#: 01-chapter7.markdown:401
msgid ""
"The original commit message for this functionality gives a simple example of "
"running all your C source code through the `indent` program before "
"committing. You can set it up by setting the filter attribute in your "
"`.gitattributes` file to filter `*.c` files with the \"indent\" filter:"
msgstr ""

#: 01-chapter7.markdown:403
msgid "\t*.c     filter=indent"
msgstr "\t*.c     filter=indent"

#: 01-chapter7.markdown:405
msgid "Then, tell Git what the \"indent\"\" filter does on smudge and clean:"
msgstr ""

#: 01-chapter7.markdown:407
msgid ""
"\t$ git config --global filter.indent.clean indent\n"
"\t$ git config --global filter.indent.smudge cat"
msgstr ""
"\t$ git config --global filter.indent.clean indent\n"
"\t$ git config --global filter.indent.smudge cat"

#: 01-chapter7.markdown:410
msgid ""
"In this case, when you commit files that match `*.c`, Git will run them "
"through the indent program before it commits them and then run them through "
"the `cat` program before it checks them back out onto disk. The `cat` "
"program is basically a no-op: it spits out the same data that it gets in. "
"This combination effectively filters all C source code files through "
"`indent` before committing."
msgstr ""

#: 01-chapter7.markdown:412
msgid ""
"Another interesting example gets `$Date$` keyword expansion, RCS style. To "
"do this properly, you need a small script that takes a filename, figures out "
"the last commit date for this project, and inserts the date into the file. "
"Here is a small Ruby script that does that:"
msgstr ""

#: 01-chapter7.markdown:414
#, fuzzy
msgid ""
"\t#! /usr/bin/env ruby\n"
"\tdata = STDIN.read\n"
"\tlast_date = `git log --pretty=format:\"%ad\" -1`\n"
"\tputs data.gsub('$Date$', '$Date: ' + last_date.to_s + '$')"
msgstr ""
"\t#! /usr/bin/env ruby\n"
"\tdata = STDIN.read\n"
"\tlast_date = `git log --pretty=format:\"%ad\" -1`\n"
"\tputs data.gsub('$Date$', '$Date: ' + last_date.to_s + '$')"

#: 01-chapter7.markdown:419
msgid ""
"All the script does is get the latest commit date from the `git log` "
"command, stick that into any `$Date$` strings it sees in stdin, and print "
"the results — it should be simple to do in whatever language you’re most "
"comfortable in. You can name this file `expand_date` and put it in your "
"path. Now, you need to set up a filter in Git (call it `dater`) and tell it "
"to use your `expand_date` filter to smudge the files on checkout. You’ll use "
"a Perl expression to clean that up on commit:"
msgstr ""

#: 01-chapter7.markdown:421
msgid ""
"\t$ git config filter.dater.smudge expand_date\n"
"\t$ git config filter.dater.clean 'perl -pe "
"\"s/\\\\\\$Date[^\\\\\\$]*\\\\\\$/\\\\\\$Date\\\\\\$/\"'"
msgstr ""
"\t$ git config filter.dater.smudge expand_date\n"
"\t$ git config filter.dater.clean 'perl -pe "
"\"s/\\\\\\$Date[^\\\\\\$]*\\\\\\$/\\\\\\$Date\\\\\\$/\"'"

#: 01-chapter7.markdown:424
msgid ""
"This Perl snippet strips out anything it sees in a `$Date$` string, to get "
"back to where you started. Now that your filter is ready, you can test it by "
"setting up a file with your `$Date$` keyword and then setting up a Git "
"attribute for that file that engages the new filter:"
msgstr ""

#: 01-chapter7.markdown:426
msgid ""
"\t$ echo '# $Date$' > date_test.txt\n"
"\t$ echo 'date*.txt filter=dater' >> .gitattributes"
msgstr ""
"\t$ echo '# $Date$' > date_test.txt\n"
"\t$ echo 'date*.txt filter=dater' >> .gitattributes"

#: 01-chapter7.markdown:429
msgid ""
"If you commit those changes and check out the file again, you see the "
"keyword properly substituted:"
msgstr ""

#: 01-chapter7.markdown:431
msgid ""
"\t$ git add date_test.txt .gitattributes\n"
"\t$ git commit -m \"Testing date expansion in Git\"\n"
"\t$ rm date_test.txt\n"
"\t$ git checkout date_test.txt\n"
"\t$ cat date_test.txt\n"
"\t# $Date: Tue Apr 21 07:26:52 2009 -0700$"
msgstr ""
"\t$ git add date_test.txt .gitattributes\n"
"\t$ git commit -m \"Testing date expansion in Git\"\n"
"\t$ rm date_test.txt\n"
"\t$ git checkout date_test.txt\n"
"\t$ cat date_test.txt\n"
"\t# $Date: Tue Apr 21 07:26:52 2009 -0700$"

#: 01-chapter7.markdown:438
msgid ""
"You can see how powerful this technique can be for customized applications. "
"You have to be careful, though, because the `.gitattributes` file is "
"committed and passed around with the project but the driver (in this case, "
"`dater`) isn’t; so, it won’t work everywhere. When you design these filters, "
"they should be able to fail gracefully and have the project still work "
"properly."
msgstr ""

#: 01-chapter7.markdown:440
msgid "### Exporting Your Repository ###"
msgstr "### Экспортирование репозитория ###"

#: 01-chapter7.markdown:442
msgid ""
"Git attribute data also allows you to do some interesting things when "
"exporting an archive of your project."
msgstr ""

#: 01-chapter7.markdown:444
msgid "#### export-ignore ####"
msgstr "#### export-ignore ####"

#: 01-chapter7.markdown:446
msgid ""
"You can tell Git not to export certain files or directories when generating "
"an archive. If there is a subdirectory or file that you don’t want to "
"include in your archive file but that you do want checked into your project, "
"you can determine those files via the `export-ignore` attribute."
msgstr ""

#: 01-chapter7.markdown:448
msgid ""
"For example, say you have some test files in a `test/` subdirectory, and it "
"doesn’t make sense to include them in the tarball export of your project. "
"You can add the following line to your Git attributes file:"
msgstr ""

#: 01-chapter7.markdown:450
msgid "\ttest/ export-ignore"
msgstr "\ttest/ export-ignore"

#: 01-chapter7.markdown:452
msgid ""
"Now, when you run git archive to create a tarball of your project, that "
"directory won’t be included in the archive."
msgstr ""

#: 01-chapter7.markdown:454
msgid "#### export-subst ####"
msgstr "#### export-subst ####"

#: 01-chapter7.markdown:456
msgid ""
"Another thing you can do for your archives is some simple keyword "
"substitution. Git lets you put the string `$Format:$` in any file with any "
"of the `--pretty=format` formatting shortcodes, many of which you saw in "
"Chapter 2. For instance, if you want to include a file named `LAST_COMMIT` "
"in your project, and the last commit date was automatically injected into it "
"when `git archive` ran, you can set up the file like this:"
msgstr ""

#: 01-chapter7.markdown:458
msgid ""
"\t$ echo 'Last commit date: $Format:%cd$' > LAST_COMMIT\n"
"\t$ echo \"LAST_COMMIT export-subst\" >> .gitattributes\n"
"\t$ git add LAST_COMMIT .gitattributes\n"
"\t$ git commit -am 'adding LAST_COMMIT file for archives'"
msgstr ""
"\t$ echo 'Last commit date: $Format:%cd$' > LAST_COMMIT\n"
"\t$ echo \"LAST_COMMIT export-subst\" >> .gitattributes\n"
"\t$ git add LAST_COMMIT .gitattributes\n"
"\t$ git commit -am 'adding LAST_COMMIT file for archives'"

#: 01-chapter7.markdown:463
msgid ""
"When you run `git archive`, the contents of that file when people open the "
"archive file will look like this:"
msgstr ""

#: 01-chapter7.markdown:465
msgid ""
"\t$ cat LAST_COMMIT\n"
"\tLast commit date: $Format:Tue Apr 21 08:38:48 2009 -0700$"
msgstr ""
"\t$ cat LAST_COMMIT\n"
"\tLast commit date: $Format:Tue Apr 21 08:38:48 2009 -0700$"

#: 01-chapter7.markdown:468
msgid "### Merge Strategies ###"
msgstr "### Стратегии слияния ###"

#: 01-chapter7.markdown:470
msgid ""
"You can also use Git attributes to tell Git to use different merge "
"strategies for specific files in your project. One very useful option is to "
"tell Git to not try to merge specific files when they have conflicts, but "
"rather to use your side of the merge over someone else’s."
msgstr ""

#: 01-chapter7.markdown:472
msgid ""
"This is helpful if a branch in your project has diverged or is specialized, "
"but you want to be able to merge changes back in from it, and you want to "
"ignore certain files. Say you have a database settings file called "
"database.xml that is different in two branches, and you want to merge in "
"your other branch without messing up the database file. You can set up an "
"attribute like this:"
msgstr ""

#: 01-chapter7.markdown:474
msgid "\tdatabase.xml merge=ours"
msgstr "\tdatabase.xml merge=ours"

#: 01-chapter7.markdown:476
msgid ""
"If you merge in the other branch, instead of having merge conflicts with the "
"database.xml file, you see something like this:"
msgstr ""

#: 01-chapter7.markdown:478
msgid ""
"\t$ git merge topic\n"
"\tAuto-merging database.xml\n"
"\tMerge made by recursive."
msgstr ""
"\t$ git merge topic\n"
"\tAuto-merging database.xml\n"
"\tMerge made by recursive."

#: 01-chapter7.markdown:482
msgid ""
"In this case, database.xml stays at whatever version you originally had."
msgstr ""

#: 01-chapter7.markdown:484
msgid "## Git Hooks ##"
msgstr "## Перхватчики событий в Git ##"

#: 01-chapter7.markdown:486
msgid ""
"Like many other Version Control Systems, Git has a way to fire off custom "
"scripts when certain important actions occur. There are two groups of these "
"hooks: client side and server side. The client-side hooks are for client "
"operations such as committing and merging. The server-side hooks are for Git "
"server operations such as receiving pushed commits. You can use these hooks "
"for all sorts of reasons, and you’ll learn about a few of them here."
msgstr ""

#: 01-chapter7.markdown:488
msgid "### Installing a Hook ###"
msgstr "### Назначение перехватчика ###"

#: 01-chapter7.markdown:490
msgid ""
"The hooks are all stored in the `hooks` subdirectory of the Git directory. "
"In most projects, that’s `.git/hooks`. By default, Git populates this "
"directory with a bunch of example scripts, many of which are useful by "
"themselves; but they also document the input values of each script. All the "
"examples are written as shell scripts, with some Perl thrown in, but any "
"properly named executable scripts will work fine — you can write them in "
"Ruby or Python or what have you. For post-1.6 versions of Git, these example "
"hook files end with .sample; you’ll need to rename them. For pre-1.6 "
"versions of Git, the example files are named properly but are not "
"executable."
msgstr ""

#: 01-chapter7.markdown:492
msgid ""
"To enable a hook script, put a file in the `hooks` subdirectory of your Git "
"directory that is named appropriately and is executable. From that point "
"forward, it should be called. I’ll cover most of the major hook filenames "
"here."
msgstr ""

#: 01-chapter7.markdown:494
msgctxt "01-chapter7.markdown:494"
msgid "### Client-Side Hooks ###"
msgstr "### Перехватчики на стороне клиента ###"

#: 01-chapter7.markdown:496
msgid ""
"There are a lot of client-side hooks. This section splits them into "
"committing-workflow hooks, e-mail-workflow scripts, and the rest of the "
"client-side scripts."
msgstr ""

#: 01-chapter7.markdown:498
msgid "#### Committing-Workflow Hooks ####"
msgstr ""

#: 01-chapter7.markdown:500
msgid ""
"The first four hooks have to do with the committing process. The `pre-"
"commit` hook is run first, before you even type in a commit message. It’s "
"used to inspect the snapshot that’s about to be committed, to see if you’ve "
"forgotten something, to make sure tests run, or to examine whatever you need "
"to inspect in the code. Exiting non-zero from this hook aborts the commit, "
"although you can bypass it with `git commit --no-verify`. You can do things "
"like check for code style (run lint or something equivalent), check for "
"trailing whitespace (the default hook does exactly that), or check for "
"appropriate documentation on new methods."
msgstr ""

#: 01-chapter7.markdown:502
msgid ""
"The `prepare-commit-msg` hook is run before the commit message editor is "
"fired up but after the default message is created. It lets you edit the "
"default message before the commit author sees it. This hook takes a few "
"options: the path to the file that holds the commit message so far, the type "
"of commit, and the commit SHA-1 if this is an amended commit. This hook "
"generally isn’t useful for normal commits; rather, it’s good for commits "
"where the default message is auto-generated, such as templated commit "
"messages, merge commits, squashed commits, and amended commits. You may use "
"it in conjunction with a commit template to programmatically insert "
"information."
msgstr ""

#: 01-chapter7.markdown:504
msgid ""
"The `commit-msg` hook takes one parameter, which again is the path to a "
"temporary file that contains the current commit message. If this script "
"exits non-zero, Git aborts the commit process, so you can use it to validate "
"your project state or commit message before allowing a commit to go "
"through. In the last section of this chapter, I’ll demonstrate using this "
"hook to check that your commit message is conformant to a required pattern."
msgstr ""

#: 01-chapter7.markdown:506
msgid ""
"After the entire commit process is completed, the `post-commit` hook runs. "
"It doesn’t take any parameters, but you can easily get the last commit by "
"running `git log -1 HEAD`. Generally, this script is used for notification "
"or something similar."
msgstr ""

#: 01-chapter7.markdown:508
msgid ""
"The committing-workflow client-side scripts can be used in just about any "
"workflow. They’re often used to enforce certain policies, although it’s "
"important to note that these scripts aren’t transferred during a clone. You "
"can enforce policy on the server side to reject pushes of commits that don’t "
"conform to some policy, but it’s entirely up to the developer to use these "
"scripts on the client side. So, these are scripts to help developers, and "
"they must be set up and maintained by them, although they can be overridden "
"or modified by them at any time."
msgstr ""

#: 01-chapter7.markdown:510
msgid "#### E-mail Workflow Hooks ####"
msgstr ""

#: 01-chapter7.markdown:512
msgid ""
"You can set up three client-side hooks for an e-mail-based workflow. They’re "
"all invoked by the `git am` command, so if you aren’t using that command in "
"your workflow, you can safely skip to the next section. If you’re taking "
"patches over e-mail prepared by `git format-patch`, then some of these may "
"be helpful to you."
msgstr ""

#: 01-chapter7.markdown:514
msgid ""
"The first hook that is run is `applypatch-msg`. It takes a single argument: "
"the name of the temporary file that contains the proposed commit message. "
"Git aborts the patch if this script exits non-zero. You can use this to make "
"sure a commit message is properly formatted or to normalize the message by "
"having the script edit it in place."
msgstr ""

#: 01-chapter7.markdown:516
msgid ""
"The next hook to run when applying patches via `git am` is `pre-applypatch`. "
"It takes no arguments and is run after the patch is applied, so you can use "
"it to inspect the snapshot before making the commit. You can run tests or "
"otherwise inspect the working tree with this script. If something is missing "
"or the tests don’t pass, exiting non-zero also aborts the `git am` script "
"without committing the patch."
msgstr ""

#: 01-chapter7.markdown:518
msgid ""
"The last hook to run during a `git am` operation is `post-applypatch`. You "
"can use it to notify a group or the author of the patch you pulled in that "
"you’ve done so. You can’t stop the patching process with this script."
msgstr ""

#: 01-chapter7.markdown:520
msgid "#### Other Client Hooks ####"
msgstr ""

#: 01-chapter7.markdown:522
msgid ""
"The `pre-rebase` hook runs before you rebase anything and can halt the "
"process by exiting non-zero. You can use this hook to disallow rebasing any "
"commits that have already been pushed. The example `pre-rebase` hook that "
"Git installs does this, although it assumes that next is the name of the "
"branch you publish. You’ll likely need to change that to whatever your "
"stable, published branch is."
msgstr ""

#: 01-chapter7.markdown:524
msgid ""
"After you run a successful `git checkout`, the `post-checkout` hook runs; "
"you can use it to set up your working directory properly for your project "
"environment. This may mean moving in large binary files that you don’t want "
"source controlled, auto-generating documentation, or something along those "
"lines."
msgstr ""

#: 01-chapter7.markdown:526
msgid ""
"Finally, the `post-merge` hook runs after a successful `merge` command. You "
"can use it to restore data in the working tree that Git can’t track, such as "
"permissions data. This hook can likewise validate the presence of files "
"external to Git control that you may want copied in when the working tree "
"changes."
msgstr ""

#: 01-chapter7.markdown:528
msgid "### Server-Side Hooks ###"
msgstr ""

#: 01-chapter7.markdown:530
msgid ""
"In addition to the client-side hooks, you can use a couple of important "
"server-side hooks as a system administrator to enforce nearly any kind of "
"policy for your project. These scripts run before and after pushes to the "
"server. The pre hooks can exit non-zero at any time to reject the push as "
"well as print an error message back to the client; you can set up a push "
"policy that’s as complex as you wish."
msgstr ""

#: 01-chapter7.markdown:532
msgid "#### pre-receive and post-receive ####"
msgstr ""

#: 01-chapter7.markdown:534
msgid ""
"The first script to run when handling a push from a client is `pre-receive`. "
"It takes a list of references that are being pushed from stdin; if it exits "
"non-zero, none of them are accepted. You can use this hook to do things "
"like make sure none of the updated references are non-fast-forwards; or to "
"check that the user doing the pushing has create, delete, or push access or "
"access to push updates to all the files they’re modifying with the push."
msgstr ""

#: 01-chapter7.markdown:536
msgid ""
"The `post-receive` hook runs after the entire process is completed and can "
"be used to update other services or notify users. It takes the same stdin "
"data as the `pre-receive` hook. Examples include e-mailing a list, notifying "
"a continuous integration server, or updating a ticket-tracking system — you "
"can even parse the commit messages to see if any tickets need to be opened, "
"modified, or closed. This script can’t stop the push process, but the "
"client doesn’t disconnect until it has completed; so, be careful when you "
"try to do anything that may take a long time."
msgstr ""

#: 01-chapter7.markdown:538
msgid "#### update ####"
msgstr ""

#: 01-chapter7.markdown:540
msgid ""
"The update script is very similar to the `pre-receive` script, except that "
"it’s run once for each branch the pusher is trying to update. If the pusher "
"is trying to push to multiple branches, `pre-receive` runs only once, "
"whereas update runs once per branch they’re pushing to. Instead of reading "
"from stdin, this script takes three arguments: the name of the reference "
"(branch), the SHA-1 that reference pointed to before the push, and the SHA-1 "
"the user is trying to push. If the update script exits non-zero, only that "
"reference is rejected; other references can still be updated."
msgstr ""

#: 01-chapter7.markdown:542
msgid "## An Example Git-Enforced Policy ##"
msgstr ""

#: 01-chapter7.markdown:544
msgid ""
"In this section, you’ll use what you’ve learned to establish a Git workflow "
"that checks for a custom commit message format, enforces fast-forward-only "
"pushes, and allows only certain users to modify certain subdirectories in a "
"project. You’ll build client scripts that help the developer know if their "
"push will be rejected and server scripts that actually enforce the policies."
msgstr ""

#: 01-chapter7.markdown:546
msgid ""
"I used Ruby to write these, both because it’s my preferred scripting "
"language and because I feel it’s the most pseudocode-looking of the "
"scripting languages; thus you should be able to roughly follow the code even "
"if you don’t use Ruby. However, any language will work fine. All the sample "
"hook scripts distributed with Git are in either Perl or Bash scripting, so "
"you can also see plenty of examples of hooks in those languages by looking "
"at the samples."
msgstr ""

#: 01-chapter7.markdown:548
msgid "### Server-Side Hook ###"
msgstr ""

#: 01-chapter7.markdown:550
msgid ""
"All the server-side work will go into the update file in your hooks "
"directory. The update file runs once per branch being pushed and takes the "
"reference being pushed to, the old revision where that branch was, and the "
"new revision being pushed. You also have access to the user doing the "
"pushing if the push is being run over SSH. If you’ve allowed everyone to "
"connect with a single user (like \"git\") via public-key authentication, you "
"may have to give that user a shell wrapper that determines which user is "
"connecting based on the public key, and set an environment variable "
"specifying that user. Here I assume the connecting user is in the `$USER` "
"environment variable, so your update script begins by gathering all the "
"information you need:"
msgstr ""

#: 01-chapter7.markdown:552
msgctxt "01-chapter7.markdown:552"
msgid "\t#!/usr/bin/env ruby"
msgstr "\t#!/usr/bin/env ruby"

#: 01-chapter7.markdown:554
msgid ""
"\t$refname = ARGV[0]\n"
"\t$oldrev  = ARGV[1]\n"
"\t$newrev  = ARGV[2]\n"
"\t$user    = ENV['USER']"
msgstr ""
"\t$refname = ARGV[0]\n"
"\t$oldrev  = ARGV[1]\n"
"\t$newrev  = ARGV[2]\n"
"\t$user    = ENV['USER']"

#: 01-chapter7.markdown:559
msgid ""
"\tputs \"Enforcing Policies... \\n(#{$refname}) (#{$oldrev[0,6]}) "
"(#{$newrev[0,6]})\""
msgstr ""
"\tputs \"Enforcing Policies... \\n(#{$refname}) (#{$oldrev[0,6]}) "
"(#{$newrev[0,6]})\""

#: 01-chapter7.markdown:561
msgid ""
"Yes, I’m using global variables. Don’t judge me — it’s easier to demonstrate "
"in this manner."
msgstr ""

#: 01-chapter7.markdown:563
msgid "#### Enforcing a Specific Commit-Message Format ####"
msgstr "#### Соблюдение определённого формата сообщений коммита ####"

#: 01-chapter7.markdown:565
msgid ""
"Your first challenge is to enforce that each commit message must adhere to a "
"particular format. Just to have a target, assume that each message has to "
"include a string that looks like \"ref: 1234\" because you want each commit to "
"link to a work item in your ticketing system. You must look at each commit "
"being pushed up, see if that string is in the commit message, and, if the "
"string is absent from any of the commits, exit non-zero so the push is "
"rejected."
msgstr ""

#: 01-chapter7.markdown:567
msgid ""
"You can get a list of the SHA-1 values of all the commits that are being "
"pushed by taking the `$newrev` and `$oldrev` values and passing them to a "
"Git plumbing command called `git rev-list`. This is basically the `git log` "
"command, but by default it prints out only the SHA-1 values and no other "
"information. So, to get a list of all the commit SHAs introduced between one "
"commit SHA and another, you can run something like this:"
msgstr ""

#: 01-chapter7.markdown:569
msgid ""
"\t$ git rev-list 538c33..d14fc7\n"
"\td14fc7c847ab946ec39590d87783c69b031bdfb7\n"
"\t9f585da4401b0a3999e84113824d15245c13f0be\n"
"\t234071a1be950e2a8d078e6141f5cd20c1e61ad3\n"
"\tdfa04c9ef3d5197182f13fb5b9b1fb7717d2222a\n"
"\t17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475"
msgstr ""
"\t$ git rev-list 538c33..d14fc7\n"
"\td14fc7c847ab946ec39590d87783c69b031bdfb7\n"
"\t9f585da4401b0a3999e84113824d15245c13f0be\n"
"\t234071a1be950e2a8d078e6141f5cd20c1e61ad3\n"
"\tdfa04c9ef3d5197182f13fb5b9b1fb7717d2222a\n"
"\t17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475"

#: 01-chapter7.markdown:576
msgid ""
"You can take that output, loop through each of those commit SHAs, grab the "
"message for it, and test that message against a regular expression that "
"looks for a pattern."
msgstr ""

#: 01-chapter7.markdown:578
msgid ""
"You have to figure out how to get the commit message from each of these "
"commits to test. To get the raw commit data, you can use another plumbing "
"command called `git cat-file`. I’ll go over all these plumbing commands in "
"detail in Chapter 9; but for now, here’s what that command gives you:"
msgstr ""

#: 01-chapter7.markdown:580
msgid ""
"\t$ git cat-file commit ca82a6\n"
"\ttree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\n"
"\tparent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n"
"\tauthor Scott Chacon <schacon@gmail.com> 1205815931 -0700\n"
"\tcommitter Scott Chacon <schacon@gmail.com> 1240030591 -0700"
msgstr ""
"\t$ git cat-file commit ca82a6\n"
"\ttree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\n"
"\tparent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n"
"\tauthor Scott Chacon <schacon@gmail.com> 1205815931 -0700\n"
"\tcommitter Scott Chacon <schacon@gmail.com> 1240030591 -0700"

#: 01-chapter7.markdown:586
msgid "\tchanged the version number"
msgstr "\tchanged the version number"

#: 01-chapter7.markdown:588
msgid ""
"A simple way to get the commit message from a commit when you have the SHA-1 "
"value is to go to the first blank line and take everything after that. You "
"can do so with the `sed` command on Unix systems:"
msgstr ""

#: 01-chapter7.markdown:590
msgid ""
"\t$ git cat-file commit ca82a6 | sed '1,/^$/d'\n"
"\tchanged the version number"
msgstr ""
"\t$ git cat-file commit ca82a6 | sed '1,/^$/d'\n"
"\tchanged the version number"

#: 01-chapter7.markdown:593
msgid ""
"You can use that incantation to grab the commit message from each commit "
"that is trying to be pushed and exit if you see anything that doesn’t match. "
"To exit the script and reject the push, exit non-zero. The whole method "
"looks like this:"
msgstr ""

#: 01-chapter7.markdown:595
msgctxt "01-chapter7.markdown:595"
msgid "\t$regex = /\\[ref: (\\d+)\\]/"
msgstr "\t$regex = /\\[ref: (\\d+)\\]/"

#: 01-chapter7.markdown:597
msgid ""
"\t# enforced custom commit message format\n"
"\tdef check_message_format\n"
"\t  missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split(\"\\n\")\n"
"\t  missed_revs.each do |rev|\n"
"\t    message = `git cat-file commit #{rev} | sed '1,/^$/d'`\n"
"\t    if !$regex.match(message)\n"
"\t      puts \"[POLICY] Your message is not formatted correctly\"\n"
"\t      exit 1\n"
"\t    end\n"
"\t  end\n"
"\tend\n"
"\tcheck_message_format"
msgstr ""
"\t# enforced custom commit message format\n"
"\tdef check_message_format\n"
"\t  missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split(\"\\n\")\n"
"\t  missed_revs.each do |rev|\n"
"\t    message = `git cat-file commit #{rev} | sed '1,/^$/d'`\n"
"\t    if !$regex.match(message)\n"
"\t      puts \"[POLICY] Your message is not formatted correctly\"\n"
"\t      exit 1\n"
"\t    end\n"
"\t  end\n"
"\tend\n"
"\tcheck_message_format"

#: 01-chapter7.markdown:610
msgid ""
"Putting that in your `update` script will reject updates that contain "
"commits that have messages that don’t adhere to your rule."
msgstr ""

#: 01-chapter7.markdown:612
msgid "#### Enforcing a User-Based ACL System ####"
msgstr ""

#: 01-chapter7.markdown:614
msgid ""
"Suppose you want to add a mechanism that uses an access control list (ACL) "
"that specifies which users are allowed to push changes to which parts of "
"your projects. Some people have full access, and others only have access to "
"push changes to certain subdirectories or specific files. To enforce this, "
"you’ll write those rules to a file named `acl` that lives in your bare Git "
"repository on the server. You’ll have the `update` hook look at those rules, "
"see what files are being introduced for all the commits being pushed, and "
"determine whether the user doing the push has access to update all those "
"files."
msgstr ""

#: 01-chapter7.markdown:616
msgid ""
"The first thing you’ll do is write your ACL. Here you’ll use a format very "
"much like the CVS ACL mechanism: it uses a series of lines, where the first "
"field is `avail` or `unavail`, the next field is a comma-delimited list of "
"the users to which the rule applies, and the last field is the path to which "
"the rule applies (blank meaning open access). All of these fields are "
"delimited by a pipe (`|`) character."
msgstr ""

#: 01-chapter7.markdown:618
msgid ""
"In this case, you have a couple of administrators, some documentation "
"writers with access to the `doc` directory, and one developer who only has "
"access to the `lib` and `tests` directories, and your ACL file looks like "
"this:"
msgstr ""

#: 01-chapter7.markdown:620
msgid ""
"\tavail|nickh,pjhyett,defunkt,tpw\n"
"\tavail|usinclair,cdickens,ebronte|doc\n"
"\tavail|schacon|lib\n"
"\tavail|schacon|tests"
msgstr ""
"\tavail|nickh,pjhyett,defunkt,tpw\n"
"\tavail|usinclair,cdickens,ebronte|doc\n"
"\tavail|schacon|lib\n"
"\tavail|schacon|tests"

#: 01-chapter7.markdown:625
msgid ""
"You begin by reading this data into a structure that you can use. In this "
"case, to keep the example simple, you’ll only enforce the `avail` "
"directives. Here is a method that gives you an associative array where the "
"key is the user name and the value is an array of paths to which the user "
"has write access:"
msgstr ""

#: 01-chapter7.markdown:627
msgid ""
"\tdef get_acl_access_data(acl_file)\n"
"\t  # read in ACL data\n"
"\t  acl_file = File.read(acl_file).split(\"\\n\").reject { |line| line == '' }\n"
"\t  access = {}\n"
"\t  acl_file.each do |line|\n"
"\t    avail, users, path = line.split('|')\n"
"\t    next unless avail == 'avail'\n"
"\t    users.split(',').each do |user|\n"
"\t      access[user] ||= []\n"
"\t      access[user] << path\n"
"\t    end\n"
"\t  end\n"
"\t  access\n"
"\tend"
msgstr ""
"\tdef get_acl_access_data(acl_file)\n"
"\t  # read in ACL data\n"
"\t  acl_file = File.read(acl_file).split(\"\\n\").reject { |line| line == '' }\n"
"\t  access = {}\n"
"\t  acl_file.each do |line|\n"
"\t    avail, users, path = line.split('|')\n"
"\t    next unless avail == 'avail'\n"
"\t    users.split(',').each do |user|\n"
"\t      access[user] ||= []\n"
"\t      access[user] << path\n"
"\t    end\n"
"\t  end\n"
"\t  access\n"
"\tend"

#: 01-chapter7.markdown:642
msgid ""
"On the ACL file you looked at earlier, this `get_acl_access_data` method "
"returns a data structure that looks like this:"
msgstr ""

#: 01-chapter7.markdown:644
msgid ""
"\t{\"defunkt\"=>[nil],\n"
"\t \"tpw\"=>[nil],\n"
"\t \"nickh\"=>[nil],\n"
"\t \"pjhyett\"=>[nil],\n"
"\t \"schacon\"=>[\"lib\", \"tests\"],\n"
"\t \"cdickens\"=>[\"doc\"],\n"
"\t \"usinclair\"=>[\"doc\"],\n"
"\t \"ebronte\"=>[\"doc\"]}"
msgstr ""
"\t{\"defunkt\"=>[nil],\n"
"\t \"tpw\"=>[nil],\n"
"\t \"nickh\"=>[nil],\n"
"\t \"pjhyett\"=>[nil],\n"
"\t \"schacon\"=>[\"lib\", \"tests\"],\n"
"\t \"cdickens\"=>[\"doc\"],\n"
"\t \"usinclair\"=>[\"doc\"],\n"
"\t \"ebronte\"=>[\"doc\"]}"

#: 01-chapter7.markdown:653
msgid ""
"Now that you have the permissions sorted out, you need to determine what "
"paths the commits being pushed have modified, so you can make sure the user "
"who’s pushing has access to all of them."
msgstr ""

#: 01-chapter7.markdown:655
msgid ""
"You can pretty easily see what files have been modified in a single commit "
"with the `--name-only` option to the `git log` command (mentioned briefly in "
"Chapter 2):"
msgstr ""

#: 01-chapter7.markdown:657
msgid "\t$ git log -1 --name-only --pretty=format:'' 9f585d"
msgstr "\t$ git log -1 --name-only --pretty=format:'' 9f585d"

#: 01-chapter7.markdown:659
msgid ""
"\tREADME\n"
"\tlib/test.rb"
msgstr ""
"\tREADME\n"
"\tlib/test.rb"

#: 01-chapter7.markdown:662
msgid ""
"If you use the ACL structure returned from the `get_acl_access_data` method "
"and check it against the listed files in each of the commits, you can "
"determine whether the user has access to push all of their commits:"
msgstr ""

#: 01-chapter7.markdown:664
msgid ""
"\t# only allows certain users to modify certain subdirectories in a project\n"
"\tdef check_directory_perms\n"
"\t  access = get_acl_access_data('acl')"
msgstr ""
"\t# only allows certain users to modify certain subdirectories in a project\n"
"\tdef check_directory_perms\n"
"\t  access = get_acl_access_data('acl')"

#: 01-chapter7.markdown:668
msgid ""
"\t  # see if anyone is trying to push something they can't\n"
"\t  new_commits = `git rev-list #{$oldrev}..#{$newrev}`.split(\"\\n\")\n"
"\t  new_commits.each do |rev|\n"
"\t    files_modified = `git log -1 --name-only --pretty=format:'' "
"#{rev}`.split(\"\\n\")\n"
"\t    files_modified.each do |path|\n"
"\t      next if path.size == 0\n"
"\t      has_file_access = false\n"
"\t      access[$user].each do |access_path|\n"
"\t        if !access_path  # user has access to everything\n"
"\t          || (path.index(access_path) == 0) # access to this path\n"
"\t          has_file_access = true \n"
"\t        end\n"
"\t      end\n"
"\t      if !has_file_access\n"
"\t        puts \"[POLICY] You do not have access to push to #{path}\"\n"
"\t        exit 1\n"
"\t      end\n"
"\t    end\n"
"\t  end  \n"
"\tend"
msgstr ""
"\t  # see if anyone is trying to push something they can't\n"
"\t  new_commits = `git rev-list #{$oldrev}..#{$newrev}`.split(\"\\n\")\n"
"\t  new_commits.each do |rev|\n"
"\t    files_modified = `git log -1 --name-only --pretty=format:'' "
"#{rev}`.split(\"\\n\")\n"
"\t    files_modified.each do |path|\n"
"\t      next if path.size == 0\n"
"\t      has_file_access = false\n"
"\t      access[$user].each do |access_path|\n"
"\t        if !access_path  # user has access to everything\n"
"\t          || (path.index(access_path) == 0) # access to this path\n"
"\t          has_file_access = true \n"
"\t        end\n"
"\t      end\n"
"\t      if !has_file_access\n"
"\t        puts \"[POLICY] You do not have access to push to #{path}\"\n"
"\t        exit 1\n"
"\t      end\n"
"\t    end\n"
"\t  end  \n"
"\tend"

#: 01-chapter7.markdown:689
msgctxt "01-chapter7.markdown:689"
msgid "\tcheck_directory_perms"
msgstr "\tcheck_directory_perms"

#: 01-chapter7.markdown:691
msgid ""
"Most of that should be easy to follow. You get a list of new commits being "
"pushed to your server with `git rev-list`. Then, for each of those, you find "
"which files are modified and make sure the user who’s pushing has access to "
"all the paths being modified. One Rubyism that may not be clear is "
"`path.index(access_path) == 0`, which is true if path begins with "
"`access_path` — this ensures that `access_path` is not just in one of the "
"allowed paths, but an allowed path begins with each accessed path. "
msgstr ""

#: 01-chapter7.markdown:693
msgid ""
"Now your users can’t push any commits with badly formed messages or with "
"modified files outside of their designated paths."
msgstr ""

#: 01-chapter7.markdown:695
msgid "#### Enforcing Fast-Forward-Only Pushes ####"
msgstr ""

#: 01-chapter7.markdown:697
msgid ""
"The only thing left is to enforce fast-forward-only pushes. In Git versions "
"1.6 or newer, you can set the `receive.denyDeletes` and "
"`receive.denyNonFastForwards` settings. But enforcing this with a hook will "
"work in older versions of Git, and you can modify it to do so only for "
"certain users or whatever else you come up with later."
msgstr ""

#: 01-chapter7.markdown:699
msgid ""
"The logic for checking this is to see if any commits are reachable from the "
"older revision that aren’t reachable from the newer one. If there are none, "
"then it was a fast-forward push; otherwise, you deny it:"
msgstr ""

#: 01-chapter7.markdown:701
msgid ""
"\t# enforces fast-forward only pushes \n"
"\tdef check_fast_forward\n"
"\t  missed_refs = `git rev-list #{$newrev}..#{$oldrev}`\n"
"\t  missed_ref_count = missed_refs.split(\"\\n\").size\n"
"\t  if missed_ref_count > 0\n"
"\t    puts \"[POLICY] Cannot push a non fast-forward reference\"\n"
"\t    exit 1\n"
"\t  end\n"
"\tend"
msgstr ""
"\t# enforces fast-forward only pushes \n"
"\tdef check_fast_forward\n"
"\t  missed_refs = `git rev-list #{$newrev}..#{$oldrev}`\n"
"\t  missed_ref_count = missed_refs.split(\"\\n\").size\n"
"\t  if missed_ref_count > 0\n"
"\t    puts \"[POLICY] Cannot push a non fast-forward reference\"\n"
"\t    exit 1\n"
"\t  end\n"
"\tend"

#: 01-chapter7.markdown:711
msgid "\tcheck_fast_forward"
msgstr ""

#: 01-chapter7.markdown:713
msgid ""
"Everything is set up. If you run `chmod u+x .git/hooks/update`, which is the "
"file you into which you should have put all this code, and then try to push "
"a non-fast-forwarded reference, you get something like this:"
msgstr ""

#: 01-chapter7.markdown:715
msgid ""
"\t$ git push -f origin master\n"
"\tCounting objects: 5, done.\n"
"\tCompressing objects: 100% (3/3), done.\n"
"\tWriting objects: 100% (3/3), 323 bytes, done.\n"
"\tTotal 3 (delta 1), reused 0 (delta 0)\n"
"\tUnpacking objects: 100% (3/3), done.\n"
"\tEnforcing Policies... \n"
"\t(refs/heads/master) (8338c5) (c5b616)\n"
"\t[POLICY] Cannot push a non-fast-forward reference\n"
"\terror: hooks/update exited with error code 1\n"
"\terror: hook declined to update refs/heads/master\n"
"\tTo git@gitserver:project.git\n"
"\t ! [remote rejected] master -> master (hook declined)\n"
"\terror: failed to push some refs to 'git@gitserver:project.git'"
msgstr ""
"\t$ git push -f origin master\n"
"\tCounting objects: 5, done.\n"
"\tCompressing objects: 100% (3/3), done.\n"
"\tWriting objects: 100% (3/3), 323 bytes, done.\n"
"\tTotal 3 (delta 1), reused 0 (delta 0)\n"
"\tUnpacking objects: 100% (3/3), done.\n"
"\tEnforcing Policies... \n"
"\t(refs/heads/master) (8338c5) (c5b616)\n"
"\t[POLICY] Cannot push a non-fast-forward reference\n"
"\terror: hooks/update exited with error code 1\n"
"\terror: hook declined to update refs/heads/master\n"
"\tTo git@gitserver:project.git\n"
"\t ! [remote rejected] master -> master (hook declined)\n"
"\terror: failed to push some refs to 'git@gitserver:project.git'"

#: 01-chapter7.markdown:730
msgid ""
"There are a couple of interesting things here. First, you see this where the "
"hook starts running."
msgstr ""

#: 01-chapter7.markdown:732
msgid ""
"\tEnforcing Policies... \n"
"\t(refs/heads/master) (fb8c72) (c56860)"
msgstr ""
"\tEnforcing Policies... \n"
"\t(refs/heads/master) (fb8c72) (c56860)"

#: 01-chapter7.markdown:735
msgid ""
"Notice that you printed that out to stdout at the very beginning of your "
"update script. It’s important to note that anything your script prints to "
"stdout will be transferred to the client."
msgstr ""

#: 01-chapter7.markdown:737
msgid "The next thing you’ll notice is the error message."
msgstr ""

#: 01-chapter7.markdown:739
msgid ""
"\t[POLICY] Cannot push a non fast-forward reference\n"
"\terror: hooks/update exited with error code 1\n"
"\terror: hook declined to update refs/heads/master"
msgstr ""
"\t[POLICY] Cannot push a non fast-forward reference\n"
"\terror: hooks/update exited with error code 1\n"
"\terror: hook declined to update refs/heads/master"

#: 01-chapter7.markdown:743
msgid ""
"The first line was printed out by you, the other two were Git telling you "
"that the update script exited non-zero and that is what is declining your "
"push. Lastly, you have this:"
msgstr ""

#: 01-chapter7.markdown:745
msgid ""
"\tTo git@gitserver:project.git\n"
"\t ! [remote rejected] master -> master (hook declined)\n"
"\terror: failed to push some refs to 'git@gitserver:project.git'"
msgstr ""
"\tTo git@gitserver:project.git\n"
"\t ! [remote rejected] master -> master (hook declined)\n"
"\terror: failed to push some refs to 'git@gitserver:project.git'"

#: 01-chapter7.markdown:749
msgid ""
"You’ll see a remote rejected message for each reference that your hook "
"declined, and it tells you that it was declined specifically because of a "
"hook failure."
msgstr ""

#: 01-chapter7.markdown:751
msgid ""
"Furthermore, if the ref marker isn’t there in any of your commits, you’ll "
"see the error message you’re printing out for that."
msgstr ""

#: 01-chapter7.markdown:753
msgid "\t[POLICY] Your message is not formatted correctly"
msgstr "\t[POLICY] Your message is not formatted correctly"

#: 01-chapter7.markdown:755
msgid ""
"Or if someone tries to edit a file they don’t have access to and push a "
"commit containing it, they will see something similar. For instance, if a "
"documentation author tries to push a commit modifying something in the `lib` "
"directory, they see"
msgstr ""

#: 01-chapter7.markdown:757
msgid "\t[POLICY] You do not have access to push to lib/test.rb"
msgstr "\t[POLICY] You do not have access to push to lib/test.rb"

#: 01-chapter7.markdown:759
msgid ""
"That’s all. From now on, as long as that `update` script is there and "
"executable, your repository will never be rewound and will never have a "
"commit message without your pattern in it, and your users will be sandboxed."
msgstr ""

#: 01-chapter7.markdown:761
msgctxt "01-chapter7.markdown:761"
msgid "### Client-Side Hooks ###"
msgstr ""

#: 01-chapter7.markdown:763
msgid ""
"The downside to this approach is the whining that will inevitably result "
"when your users’ commit pushes are rejected. Having their carefully crafted "
"work rejected at the last minute can be extremely frustrating and confusing; "
"and furthermore, they will have to edit their history to correct it, which "
"isn’t always for the faint of heart."
msgstr ""

#: 01-chapter7.markdown:765
msgid ""
"The answer to this dilemma is to provide some client-side hooks that users "
"can use to notify them when they’re doing something that the server is "
"likely to reject. That way, they can correct any problems before committing "
"and before those issues become more difficult to fix. Because hooks aren’t "
"transferred with a clone of a project, you must distribute these scripts "
"some other way and then have your users copy them to their `.git/hooks` "
"directory and make them executable. You can distribute these hooks within "
"the project or in a separate project, but there is no way to set them up "
"automatically."
msgstr ""

#: 01-chapter7.markdown:767
msgid ""
"To begin, you should check your commit message just before each commit is "
"recorded, so you know the server won’t reject your changes due to badly "
"formatted commit messages. To do this, you can add the `commit-msg` hook. If "
"you have it read the message from the file passed as the first argument and "
"compare that to the pattern, you can force Git to abort the commit if there "
"is no match:"
msgstr ""

#: 01-chapter7.markdown:769
msgid ""
"\t#!/usr/bin/env ruby\n"
"\tmessage_file = ARGV[0]\n"
"\tmessage = File.read(message_file)"
msgstr ""
"\t#!/usr/bin/env ruby\n"
"\tmessage_file = ARGV[0]\n"
"\tmessage = File.read(message_file)"

#: 01-chapter7.markdown:773
msgctxt "01-chapter7.markdown:773"
msgid "\t$regex = /\\[ref: (\\d+)\\]/"
msgstr "\t$regex = /\\[ref: (\\d+)\\]/"

#: 01-chapter7.markdown:775
msgid ""
"\tif !$regex.match(message)\n"
"\t  puts \"[POLICY] Your message is not formatted correctly\"\n"
"\t  exit 1\n"
"\tend"
msgstr ""
"\tif !$regex.match(message)\n"
"\t  puts \"[POLICY] Your message is not formatted correctly\"\n"
"\t  exit 1\n"
"\tend"

#: 01-chapter7.markdown:780
msgid ""
"If that script is in place (in `.git/hooks/commit-msg`) and executable, and "
"you commit with a message that isn’t properly formatted, you see this:"
msgstr ""

#: 01-chapter7.markdown:782
msgid ""
"\t$ git commit -am 'test'\n"
"\t[POLICY] Your message is not formatted correctly"
msgstr ""
"\t$ git commit -am 'test'\n"
"\t[POLICY] Your message is not formatted correctly"

#: 01-chapter7.markdown:785
msgid ""
"No commit was completed in that instance. However, if your message contains "
"the proper pattern, Git allows you to commit:"
msgstr ""

#: 01-chapter7.markdown:787
msgid ""
"\t$ git commit -am 'test [ref: 132]'\n"
"\t[master e05c914] test [ref: 132]\n"
"\t 1 files changed, 1 insertions(+), 0 deletions(-)"
msgstr ""
"\t$ git commit -am 'test [ref: 132]'\n"
"\t[master e05c914] test [ref: 132]\n"
"\t 1 files changed, 1 insertions(+), 0 deletions(-)"

#: 01-chapter7.markdown:791
msgid ""
"Next, you want to make sure you aren’t modifying files that are outside your "
"ACL scope. If your project’s `.git` directory contains a copy of the ACL "
"file you used previously, then the following `pre-commit` script will "
"enforce those constraints for you:"
msgstr ""

#: 01-chapter7.markdown:793
msgctxt "01-chapter7.markdown:793"
msgid "\t#!/usr/bin/env ruby"
msgstr "\t#!/usr/bin/env ruby"

#: 01-chapter7.markdown:795
msgid "\t$user    = ENV['USER']"
msgstr "\t$user    = ENV['USER']"

#: 01-chapter7.markdown:797
#, fuzzy
msgid "\t# [ insert acl_access_data method from above ]"
msgstr "\t# [ insert acl_access_data method from above ]"

#: 01-chapter7.markdown:799
msgid ""
"\t# only allows certain users to modify certain subdirectories in a project\n"
"\tdef check_directory_perms\n"
"\t  access = get_acl_access_data('.git/acl')"
msgstr ""
"\t# only allows certain users to modify certain subdirectories in a project\n"
"\tdef check_directory_perms\n"
"\t  access = get_acl_access_data('.git/acl')"

#: 01-chapter7.markdown:803
msgid ""
"\t  files_modified = `git diff-index --cached --name-only HEAD`.split(\"\\n\")\n"
"\t  files_modified.each do |path|\n"
"\t    next if path.size == 0\n"
"\t    has_file_access = false\n"
"\t    access[$user].each do |access_path|\n"
"\t    if !access_path || (path.index(access_path) == 0)\n"
"\t      has_file_access = true\n"
"\t    end\n"
"\t    if !has_file_access\n"
"\t      puts \"[POLICY] You do not have access to push to #{path}\"\n"
"\t      exit 1\n"
"\t    end\n"
"\t  end\n"
"\tend"
msgstr ""
"\t  files_modified = `git diff-index --cached --name-only HEAD`.split(\"\\n\")\n"
"\t  files_modified.each do |path|\n"
"\t    next if path.size == 0\n"
"\t    has_file_access = false\n"
"\t    access[$user].each do |access_path|\n"
"\t    if !access_path || (path.index(access_path) == 0)\n"
"\t      has_file_access = true\n"
"\t    end\n"
"\t    if !has_file_access\n"
"\t      puts \"[POLICY] You do not have access to push to #{path}\"\n"
"\t      exit 1\n"
"\t    end\n"
"\t  end\n"
"\tend"

#: 01-chapter7.markdown:818
msgctxt "01-chapter7.markdown:818"
msgid "\tcheck_directory_perms"
msgstr "\tcheck_directory_perms"

#: 01-chapter7.markdown:820
msgid ""
"This is roughly the same script as the server-side part, but with two "
"important differences. First, the ACL file is in a different place, because "
"this script runs from your working directory, not from your Git directory. "
"You have to change the path to the ACL file from this"
msgstr ""

#: 01-chapter7.markdown:822
msgid "\taccess = get_acl_access_data('acl')"
msgstr "\taccess = get_acl_access_data('acl')"

#: 01-chapter7.markdown:824
msgid "to this:"
msgstr ""

#: 01-chapter7.markdown:826
msgid "\taccess = get_acl_access_data('.git/acl')"
msgstr "\taccess = get_acl_access_data('.git/acl')"

#: 01-chapter7.markdown:828
msgid ""
"The other important difference is the way you get a listing of the files "
"that have been changed. Because the server-side method looks at the log of "
"commits, and, at this point, the commit hasn’t been recorded yet, you must "
"get your file listing from the staging area instead. Instead of"
msgstr ""

#: 01-chapter7.markdown:830
msgid "\tfiles_modified = `git log -1 --name-only --pretty=format:'' #{ref}`"
msgstr "\tfiles_modified = `git log -1 --name-only --pretty=format:'' #{ref}`"

#: 01-chapter7.markdown:832
msgid "you have to use"
msgstr ""

#: 01-chapter7.markdown:834
msgid "\tfiles_modified = `git diff-index --cached --name-only HEAD`"
msgstr "\tfiles_modified = `git diff-index --cached --name-only HEAD`"

#: 01-chapter7.markdown:836
msgid ""
"But those are the only two differences — otherwise, the script works the "
"same way. One caveat is that it expects you to be running locally as the "
"same user you push as to the remote machine. If that is different, you must "
"set the `$user` variable manually."
msgstr ""

#: 01-chapter7.markdown:838
msgid ""
"The last thing you have to do is check that you’re not trying to push non-"
"fast-forwarded references, but that is a bit less common. To get a reference "
"that isn’t a fast-forward, you either have to rebase past a commit you’ve "
"already pushed up or try pushing a different local branch up to the same "
"remote branch."
msgstr ""

#: 01-chapter7.markdown:840
msgid ""
"Because the server will tell you that you can’t push a non-fast-forward "
"anyway, and the hook prevents forced pushes, the only accidental thing you "
"can try to catch is rebasing commits that have already been pushed."
msgstr ""

#: 01-chapter7.markdown:842
msgid ""
"Here is an example pre-rebase script that checks for that. It gets a list of "
"all the commits you’re about to rewrite and checks whether they exist in "
"any of your remote references. If it sees one that is reachable from one of "
"your remote references, it aborts the rebase:"
msgstr ""

#: 01-chapter7.markdown:844
msgctxt "01-chapter7.markdown:844"
msgid "\t#!/usr/bin/env ruby"
msgstr "\t#!/usr/bin/env ruby"

#: 01-chapter7.markdown:846
msgid ""
"\tbase_branch = ARGV[0]\n"
"\tif ARGV[1]\n"
"\t  topic_branch = ARGV[1]\n"
"\telse\n"
"\t  topic_branch = \"HEAD\"\n"
"\tend"
msgstr ""
"\tbase_branch = ARGV[0]\n"
"\tif ARGV[1]\n"
"\t  topic_branch = ARGV[1]\n"
"\telse\n"
"\t  topic_branch = \"HEAD\"\n"
"\tend"

#: 01-chapter7.markdown:853
msgid ""
"\ttarget_shas = `git rev-list #{base_branch}..#{topic_branch}`.split(\"\\n\")\n"
"\tremote_refs = `git branch -r`.split(\"\\n\").map { |r| r.strip }"
msgstr ""
"\ttarget_shas = `git rev-list #{base_branch}..#{topic_branch}`.split(\"\\n\")\n"
"\tremote_refs = `git branch -r`.split(\"\\n\").map { |r| r.strip }"

#: 01-chapter7.markdown:856
msgid ""
"\ttarget_shas.each do |sha|\n"
"\t  remote_refs.each do |remote_ref|\n"
"\t    shas_pushed = `git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`\n"
"\t    if shas_pushed.split(“\\n”).include?(sha)\n"
"\t      puts \"[POLICY] Commit #{sha} has already been pushed to "
"#{remote_ref}\"\n"
"\t      exit 1\n"
"\t    end\n"
"\t  end\n"
"\tend"
msgstr ""
"\ttarget_shas.each do |sha|\n"
"\t  remote_refs.each do |remote_ref|\n"
"\t    shas_pushed = `git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`\n"
"\t    if shas_pushed.split(“\\n”).include?(sha)\n"
"\t      puts \"[POLICY] Commit #{sha} has already been pushed to "
"#{remote_ref}\"\n"
"\t      exit 1\n"
"\t    end\n"
"\t  end\n"
"\tend"

#: 01-chapter7.markdown:866
msgid ""
"This script uses a syntax that wasn’t covered in the Revision Selection "
"section of Chapter 6. You get a list of commits that have already been "
"pushed up by running this:"
msgstr ""

#: 01-chapter7.markdown:868
msgid "\tgit rev-list ^#{sha}^@ refs/remotes/#{remote_ref}"
msgstr "\tgit rev-list ^#{sha}^@ refs/remotes/#{remote_ref}"

#: 01-chapter7.markdown:870
msgid ""
"The `SHA^@` syntax resolves to all the parents of that commit. You’re "
"looking for any commit that is reachable from the last commit on the remote "
"and that isn’t reachable from any parent of any of the SHAs you’re trying to "
"push up — meaning it’s a fast-forward."
msgstr ""

#: 01-chapter7.markdown:872
msgid ""
"The main drawback to this approach is that it can be very slow and is often "
"unnecessary — if you don’t try to force the push with `-f`, the server will "
"warn you and not accept the push. However, it’s an interesting exercise and "
"can in theory help you avoid a rebase that you might later have to go back "
"and fix."
msgstr ""

#: 01-chapter7.markdown:874
msgid "## Summary ##"
msgstr ""

#: 01-chapter7.markdown:876
msgid ""
"You’ve covered most of the major ways that you can customize your Git client "
"and server to best fit your workflow and projects. You’ve learned about all "
"sorts of configuration settings, file-based attributes, and event hooks, "
"and you’ve built an example policy-enforcing server. You should now be able "
"to make Git fit nearly any workflow you can dream up."
msgstr ""
